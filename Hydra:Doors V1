--// Load Library from URL
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bocaj111004/Linora/refs/heads/main/Library.lua"))()
if not Library or not Library.CreateWindow then
    warn("Failed to load Linoria Library")
    return
end

--// Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

--// Create Window
local Window = Library:CreateWindow({
    Title = "Hydra",
    Center = true,
    AutoShow = true,
})

--// Tabs
local MainTab = Window:AddTab("Main")
local ExploitsTab = Window:AddTab("Exploits")
local VisualsTab = Window:AddTab("Visuals")
local FloorTab = Window:AddTab("Floor")
local UISettingsTab = Window:AddTab("UI Settings")
local CreditsTab = Window:AddTab("Credits")

--// Main Tab Groups
local PlayerGroup = MainTab:AddLeftGroupbox("Player")
local AutomationGroup = MainTab:AddRightGroupbox("Automation")
local ReachGroup = MainTab:AddLeftGroupbox("Reach")
local MiscGroup = MainTab:AddRightGroupbox("Misc")

--// Helper function to check number
local function isNumber(val)
    return tonumber(val) ~= nil
end

--// HumanModCons for connections
local HumanModCons = {
    wsLoop = nil,
    wsCA = nil,
    jpLoop = nil,
    jpCA = nil,
}

--// Variables
local speedHackEnabled = false
local speedValue = 16
local jumpHeightEnabled = false
local jumpHeightValue = 50
local antiAfkEnabled = false
local antiAfkConnections = {}

--// Speed Bypass Setup
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Collision = Character:WaitForChild("Collision", 9e9)
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart", 9e9)
local CollisionClone = Collision:Clone()
CollisionClone.Name = "ClonedCollision"
CollisionClone.Parent = Character
CollisionClone.CanCollide = false
CollisionClone.Massless = true
if CollisionClone:FindFirstChild("CollisionCrouch") then
    CollisionClone.CollisionCrouch:Destroy()
end

Player.CharacterAdded:Connect(function(NewCharacter)
    Collision = NewCharacter:WaitForChild("Collision", 9e9)
    HumanoidRootPart = NewCharacter:WaitForChild("HumanoidRootPart", 9e9)
    if CollisionClone then CollisionClone:Destroy() end
    CollisionClone = Collision:Clone()
    CollisionClone.Name = "ClonedCollision"
    CollisionClone.Parent = NewCharacter
    CollisionClone.CanCollide = false
    CollisionClone.Massless = true
    if CollisionClone:FindFirstChild("CollisionCrouch") then
        CollisionClone.CollisionCrouch:Destroy()
    end
    Character = NewCharacter
end)

getgenv().SpeedBypass = false

task.spawn(function()
    while task.wait(0.22) do
        if getgenv().SpeedBypass == true and CollisionClone and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = Player.Character.HumanoidRootPart
            if not hrp.Anchored then
                CollisionClone.Massless = false
            else
                CollisionClone.Massless = true
                task.wait(1)
            end
            if CollisionClone then
                CollisionClone.Massless = true
            end
        else
            if CollisionClone then
                CollisionClone.Massless = true
            end
        end
    end
end)

--// Player: Speed Hack + Slider
PlayerGroup:AddToggle("SpeedHackToggle", {
    Text = "Enable Speed Hack",
    Default = false,
    Callback = function(value)
        speedHackEnabled = value
        if value then
            getgenv().SpeedBypass = true
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Human = Char:FindFirstChildOfClass("Humanoid")
            if Human then
                local function WalkSpeedChange()
                    if Char and Human then
                        Human.WalkSpeed = speedValue
                    end
                end
                WalkSpeedChange()
                if HumanModCons.wsLoop then HumanModCons.wsLoop:Disconnect() end
                if HumanModCons.wsCA then HumanModCons.wsCA:Disconnect() end
                HumanModCons.wsLoop = Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
                HumanModCons.wsCA = Player.CharacterAdded:Connect(function(newChar)
                    Char = newChar
                    Human = newChar:WaitForChild("Humanoid")
                    WalkSpeedChange()
                    if HumanModCons.wsLoop then HumanModCons.wsLoop:Disconnect() end
                    HumanModCons.wsLoop = Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
                end)
            end
        else
            getgenv().SpeedBypass = false
            if HumanModCons.wsLoop then HumanModCons.wsLoop:Disconnect() HumanModCons.wsLoop = nil end
            if HumanModCons.wsCA then HumanModCons.wsCA:Disconnect() HumanModCons.wsCA = nil end
            local Char = Player.Character
            local Human = Char and Char:FindFirstChildOfClass("Humanoid")
            if Human then Human.WalkSpeed = 16 end
        end
    end
})

PlayerGroup:AddSlider("SpeedHackSlider", {
    Text = "Speed Hack Speed",
    Default = 16,
    Min = 16,
    Max = 100,
    Rounding = 1,
    Callback = function(value)
        speedValue = value
        if speedHackEnabled then
            local Char = Player.Character
            local Human = Char and Char:FindFirstChildOfClass("Humanoid")
            if Human then
                Human.WalkSpeed = speedValue
            end
        end
    end
})

--// Player: Jump Height Toggle + Slider
PlayerGroup:AddToggle("JumpHeightToggle", {
    Text = "Enable Jump",
    Default = false,
    Callback = function(value)
        jumpHeightEnabled = value
        if value then
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Human = Char:FindFirstChildOfClass("Humanoid")
            if Human then
                local function JumpPowerChange()
                    if Human.UseJumpPower then
                        Human.JumpPower = jumpHeightValue
                    else
                        Human.JumpHeight = jumpHeightValue
                    end
                end
                JumpPowerChange()
                if HumanModCons.jpLoop then HumanModCons.jpLoop:Disconnect() end
                if HumanModCons.jpCA then HumanModCons.jpCA:Disconnect() end
                HumanModCons.jpLoop = Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange)
                HumanModCons.jpCA = Player.CharacterAdded:Connect(function(newChar)
                    Char = newChar
                    Human = newChar:WaitForChild("Humanoid")
                    JumpPowerChange()
                    if HumanModCons.jpLoop then HumanModCons.jpLoop:Disconnect() end
                    HumanModCons.jpLoop = Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange)
                end)
            end
        else
            if HumanModCons.jpLoop then HumanModCons.jpLoop:Disconnect() HumanModCons.jpLoop = nil end
            if HumanModCons.jpCA then HumanModCons.jpCA:Disconnect() HumanModCons.jpCA = nil end
            local Char = Player.Character
            local Human = Char and Char:FindFirstChildOfClass("Humanoid")
            if Human then
                if Human.UseJumpPower then
                    Human.JumpPower = 50
                else
                    Human.JumpHeight = 50
                end
            end
        end
    end
})

PlayerGroup:AddSlider("JumpHeightSlider", {
    Text = "Jump Height",
    Default = 50,
    Min = 20,
    Max = 200,
    Rounding = 1,
    Callback = function(value)
        jumpHeightValue = value
        if jumpHeightEnabled then
            local Char = Player.Character
            local Human = Char and Char:FindFirstChildOfClass("Humanoid")
            if Human then
                if Human.UseJumpPower then
                    Human.JumpPower = jumpHeightValue
                else
                    Human.JumpHeight = jumpHeightValue
                end
            end
        end
    end
})

--// Misc: Anti-AFK
MiscGroup:AddToggle("AntiAFKToggle", {
    Text = "Enable Anti-AFK",
    Default = false,
    Callback = function(value)
        antiAfkEnabled = value
        if value then
            for _, conn in pairs(antiAfkConnections) do if conn then conn:Disconnect() end end
            antiAfkConnections = {}
            local GC = getconnections or get_signal_cons
            if GC then
                for i, v in pairs(GC(LocalPlayer.Idled)) do
                    if v.Disable then v:Disable() elseif v.Disconnect then v:Disconnect() end
                end
            else
                local VirtualUser = cloneref(game:GetService("VirtualUser"))
                local conn = LocalPlayer.Idled:Connect(function()
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
                table.insert(antiAfkConnections, conn)
            end
        else
            for _, conn in pairs(antiAfkConnections) do if conn then conn:Disconnect() end end
            antiAfkConnections = {}
        end
    end
})

--// Misc: TP Tool Toggle
local tpToolInstance = nil
MiscGroup:AddToggle("TPToolToggle", {
    Text = "Enable TP Tool",
    Default = false,
    Callback = function(state)
        if state then
            local TpTool = Instance.new("Tool")
            TpTool.Name = "Teleport Tool"
            TpTool.RequiresHandle = false
            TpTool.Parent = LocalPlayer.Backpack
            tpToolInstance = TpTool

            TpTool.Activated:Connect(function()
                local Char = LocalPlayer.Character or workspace:FindFirstChild(LocalPlayer.Name)
                local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
                if not Char or not HRP then
                    return warn("Failed to find HumanoidRootPart")
                end
                local Mouse = LocalPlayer:GetMouse()
                HRP.CFrame = CFrame.new(Mouse.Hit.X, Mouse.Hit.Y + 3, Mouse.Hit.Z, select(4, HRP.CFrame:components()))
            end)
        else
            if tpToolInstance and tpToolInstance.Parent then
                tpToolInstance:Destroy()
                tpToolInstance = nil
            end
        end
    end
})

--// Init UI
Library:Init()
