print("[Hydra] Script execution started")

--// Load Linoria Library
local LibraryURL = "https://raw.githubusercontent.com/bocaj111004/Linora/refs/heads/main/Library.lua"
print("[Hydra] Loading Linoria Library from:", LibraryURL)

local Library = loadstring(game:HttpGet(LibraryURL))()
if not Library or not Library.CreateWindow then
    warn("[Hydra] Failed to load Linoria Library")
    return
end
print("[Hydra] Linoria Library loaded successfully")

--// Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

print("[Hydra] Services loaded")

--// Create Window with username
local Window = Library:CreateWindow({
    Title = "Hydra | " .. LocalPlayer.Name,
    Center = true,
    AutoShow = true,
})
print("[Hydra] UI Window created for user:", LocalPlayer.Name)

--// Tabs
local MainTab = Window:AddTab("Main")
local ExploitsTab = Window:AddTab("Exploits")
local VisualsTab = Window:AddTab("Visuals")
local FloorTab = Window:AddTab("Floor")
local UISettingsTab = Window:AddTab("UI Settings")
local CreditsTab = Window:AddTab("Credits")
print("[Hydra] Tabs created")

--// Main Tab Groups
local PlayerGroup = MainTab:AddLeftGroupbox("Player")
local AutomationGroup = MainTab:AddRightGroupbox("Automation")
local ReachGroup = MainTab:AddLeftGroupbox("Reach")
local MiscGroup = MainTab:AddRightGroupbox("Misc")
print("[Hydra] Groups created")

--// Variables
local speedValue = 16
local speedHackEnabled = false
local jumpHeightValue = 50
local jumpHeightEnabled = false
local antiAfkEnabled = false
local noAccelEnabled = false
local OldAccel = nil
local noclipEnabled = false
local flyEnabled = false
local flySpeed = 15

--// Helper function for commands (dummy addcmd)
local commandTable = {}
local function addcmd(cmdName, aliases, func)
    commandTable[cmdName] = func
    if aliases then
        for _, alias in ipairs(aliases) do
            commandTable[alias] = func
        end
    end
end

local function isNumber(val)
    return tonumber(val) ~= nil
end

--// Speed Hack
PlayerGroup:AddToggle("SpeedHackToggle", {
    Text = "Enable Speed Hack",
    Default = false,
    Callback = function(value)
        speedHackEnabled = value
        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = value and speedValue or 16
        end
    end
})

PlayerGroup:AddSlider("SpeedHackSlider", {
    Text = "Speed Hack Speed",
    Default = 16,
    Min = 16,
    Max = 100,
    Rounding = 1,
    Callback = function(value)
        speedValue = value
        if speedHackEnabled then
            local char = LocalPlayer.Character
            local humanoid = char and char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = speedValue
            end
        end
    end
})

--// Jump Hack
PlayerGroup:AddToggle("JumpHeightToggle", {
    Text = "Enable Jump",
    Default = false,
    Callback = function(value)
        jumpHeightEnabled = value
        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end

        if value then
            if humanoid.UseJumpPower then
                humanoid.JumpPower = jumpHeightValue
            else
                humanoid.JumpHeight = jumpHeightValue
            end
        else
            if humanoid.UseJumpPower then
                humanoid.JumpPower = 50
            else
                humanoid.JumpHeight = 50
            end
        end
    end
})

PlayerGroup:AddSlider("JumpHeightSlider", {
    Text = "Jump Height",
    Default = 50,
    Min = 20,
    Max = 200,
    Rounding = 1,
    Callback = function(value)
        jumpHeightValue = value
        if jumpHeightEnabled then
            local char = LocalPlayer.Character
            local humanoid = char and char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                if humanoid.UseJumpPower then
                    humanoid.JumpPower = jumpHeightValue
                else
                    humanoid.JumpHeight = jumpHeightValue
                end
            end
        end
    end
})

--// No Acceleration
PlayerGroup:AddToggle("NoAccelerationToggle", {
    Text = "No Acceleration",
    Default = false,
    Callback = function(value)
        noAccelEnabled = value
        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local HRP = char:WaitForChild("HumanoidRootPart")
        if not HRP then return end

        if not OldAccel then
            OldAccel = HRP.CustomPhysicalProperties
        end

        if value then
            HRP.CustomPhysicalProperties = PhysicalProperties.new(100, 0.7, 0, 1, 1)
        else
            HRP.CustomPhysicalProperties = OldAccel
        end
    end
})

PlayerGroup:AddDivider()

--// Noclip Toggle
local RunService = game:GetService("RunService")
local noclipConnection = nil

PlayerGroup:AddToggle("NoclipToggle", {
    Text = "Enable Noclip",
    Default = false,
    Callback = function(value)
        noclipEnabled = value

        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end

        if value then
            noclipConnection = RunService.Stepped:Connect(function()
                local char = LocalPlayer.Character
                if not char then return end
                for _, part in pairs(char:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide == true then
                        part.CanCollide = false
                    end
                end
            end)
            Library:Notify("Noclip Enabled", 3)
        else
            local char = LocalPlayer.Character
            if char then
                for _, part in pairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            Library:Notify("Noclip Disabled", 3)
        end
    end
})

--// Fly Toggle + Slider using addcmd commands and global fly variables
local iyflyspeed = 15
local flyEnabled = false

addcmd('fly', {}, function(args, speaker)
    if flyEnabled then
        -- Disable old fly first
        flyEnabled = false
    end

    if args[1] and isNumber(args[1]) then
        iyflyspeed = tonumber(args[1])
    end

    flyEnabled = true
    Library:Notify("Fly enabled at speed " .. iyflyspeed, 3)

    -- Your original fly code would go here or be triggered
    -- This is a placeholder since actual fly code depends on your external functions
end)

addcmd('flyspeed', {'flysp'}, function(args, speaker)
    local speed = args[1] or 1
    if isNumber(speed) then
        iyflyspeed = tonumber(speed)
        Library:Notify("Fly speed set to " .. iyflyspeed, 3)
    end
end)

-- UI control toggle for fly via UI toggle
PlayerGroup:AddToggle("FlyToggle", {
    Text = "Enable Fly",
    Default = false,
    Callback = function(value)
        flyEnabled = value
        if value then
            -- Call fly command with current speed
            if commandTable['fly'] then
                commandTable['fly']({ tostring(iyflyspeed) }, LocalPlayer)
            end
        else
            flyEnabled = false
            Library:Notify("Fly Disabled", 3)
            -- Insert disable fly code here if needed
        end
    end
})

PlayerGroup:AddSlider("FlySpeedSlider", {
    Text = "Fly Speed",
    Default = 15,
    Min = 1,
    Max = 30,
    Rounding = 1,
    Callback = function(value)
        iyflyspeed = value
        if flyEnabled then
            if commandTable['flyspeed'] then
                commandTable['flyspeed']({ tostring(value) }, LocalPlayer)
            end
        end
    end
})

--// Automation Tab: Auto Interact (no keybind)
AutomationGroup:AddToggle("AutoInteractToggle", {
    Text = "Automatic Interact",
    Default = false,
    Tooltip = "Automatically activates nearby interactables.",
    Callback = function(value)
        -- Placeholder for auto interact logic
        if value then
            print("[Hydra] Auto Interact Enabled")
        else
            print("[Hydra] Auto Interact Disabled")
        end
    end
})

AutomationGroup:AddDropdown("AutoInteractOptions", {
    Values = { "Use Lockpick ( Doors )", "Use Lockpick ( Other )", "Ignore Light Sources", "Ignore Can-Die" },
    Default = {},
    Multi = true,
    Text = "Automatic Interact Options"
})

AutomationGroup:AddSlider("AutoInteractRange", {
    Text = "Range Multiplier",
    Default = 1,
    Min = 1,
    Max = 2,
    Rounding = 1,
    Compact = false
})

AutomationGroup:AddDivider()

--// Misc Tab
MiscGroup:AddToggle("AntiAFKToggle", {
    Text = "Enable Anti-AFK",
    Default = false,
    Callback = function(value)
        antiAfkEnabled = value
        if value then
            local GC = getconnections or get_signal_cons
            if GC then
                for _, v in pairs(GC(LocalPlayer.Idled)) do
                    if v.Disable then v:Disable() elseif v.Disconnect then v:Disconnect() end
                end
            else
                local VirtualUser = cloneref(game:GetService("VirtualUser"))
                LocalPlayer.Idled:Connect(function()
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end
        end
    end
})

MiscGroup:AddToggle("TPToolToggle", {
    Text = "Give TP Tool",
    Default = false,
    Callback = function(value)
        if value then
            local TpTool = Instance.new("Tool")
            TpTool.Name = "Teleport Tool"
            TpTool.RequiresHandle = false
            TpTool.Parent = LocalPlayer.Backpack
            TpTool.Activated:Connect(function()
                local Char = LocalPlayer.Character or workspace:FindFirstChild(LocalPlayer.Name)
                local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
                local Mouse = LocalPlayer:GetMouse()
                if HRP and Mouse then
                    HRP.CFrame = CFrame.new(Mouse.Hit.X, Mouse.Hit.Y + 3, Mouse.Hit.Z)
                end
            end)
        else
            for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
                if tool.Name == "Teleport Tool" then
                    tool:Destroy()
                end
            end
        end
    end
})

--// UI Settings Tab - Menu Properties
local MenuProperties = UISettingsTab:AddLeftGroupbox("Menu Properties")
MenuProperties:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
MenuProperties:AddDivider()
MenuProperties:AddToggle("keybindmenu", { Text = "Show Keybinds", Default = false })

local Toggles = Library.ToggleRegistry or {}
local Options = Library.Options or {}

-- Fix MenuKeybind working properly
Options.MenuKeybind = Options.MenuKeybind or Enum.KeyCode.RightShift

local function toggleMenuVisibility()
    Window:SetVisible(not Window.Visible)
end

Library:BindToKeyPicker("MenuKeybind", function(key)
    Options.MenuKeybind = key
    print("[Hydra] Menu keybind set to:", key.Name)
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Options.MenuKeybind then
        toggleMenuVisibility()
    end
end)

Toggles.keybindmenu:OnChanged(function()
    Library.KeybindFrame.Visible = Toggles.keybindmenu.Value
end)

Library.ToggleKeybind = Options.MenuKeybind

--// Init UI
Library:Init()
print("[Hydra] UI Initialized")
